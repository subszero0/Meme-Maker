# version: '3.8'  # Removed as Docker Compose no longer requires version

# üîí SECURITY-HARDENED DOCKER COMPOSE CONFIGURATION
# Addresses T-002 Container Escape Prevention (CVSS 9.1)
# Implements enhanced container isolation, capability dropping, and resource limits

services:
  redis:
    image: redis:7.2.5-alpine
    container_name: meme-maker-redis-hardened
    restart: unless-stopped
    
    # üîí SECURITY HARDENING
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:size=50M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev
    
    # üîí RESOURCE LIMITS
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    
    ports:
      - "6381:6379"
    
    command: ["redis-server", "--appendonly", "yes"]
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    
    volumes:
      - redis-data:/data:rw
    
    networks:
      - secure-backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: meme-maker-backend-hardened
    restart: unless-stopped
    
    depends_on:
      redis:
        condition: service_healthy
    
    # üîí SECURITY HARDENING
    security_opt:
      - no-new-privileges:true
      # - seccomp:seccomp-profiles/backend-seccomp.json  # Disabled for Windows Docker
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev
      - /app/logs:size=50M,noexec,nosuid,nodev
    
    # üîí RESOURCE LIMITS
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    environment:
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - CLIPS_DIR=/app/clips
      - BASE_URL=https://memeit.pro
      - CORS_ORIGINS=["https://memeit.pro", "https://www.memeit.pro"]
      - INSTAGRAM_COOKIES_B64=${INSTAGRAM_COOKIES_B64}
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    
    ports:
      - "8002:8000"
    
    volumes:
      - ./storage:/app/clips:rw,Z
      - backend-cache:/app/.cache:rw
    
    command: >
      sh -c "
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2 || 
        (echo '‚ùå Backend failed to start. Review logs above for errors.' && exit 1)
      "
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - secure-backend
      - secure-frontend

  frontend:
    build:
      context: ./frontend-new
      dockerfile: Dockerfile
    container_name: meme-maker-frontend-hardened
    restart: unless-stopped
    
    depends_on:
      backend:
        condition: service_healthy
    
    # üîí SECURITY HARDENING
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:size=50M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev
      - /var/cache/nginx:size=50M,noexec,nosuid,nodev
    
    # üîí RESOURCE LIMITS
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    
    ports:
      - "8082:80"
    
    environment:
      - NODE_ENV=production
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - secure-frontend

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: meme-maker-worker-hardened
    restart: unless-stopped
    
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    
    # üîí ENHANCED SECURITY HARDENING FOR VIDEO PROCESSING
    # This is the most critical container for T-002 prevention
    security_opt:
      - no-new-privileges:true
      # - seccomp:seccomp-profiles/worker-seccomp.json   # Disabled for Windows Docker
      # - apparmor:worker-apparmor-profile               # Disabled for Windows Docker
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:size=200M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev
    
    # üîí STRICT RESOURCE LIMITS FOR yt-dlp PROCESSES
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.75'
    
    # üîí NETWORK RESTRICTIONS
    # Worker should only communicate with Redis and Backend
    networks:
      - secure-backend
    
    environment:
      - REDIS_URL=redis://redis:6379
      - CLIPS_DIR=/app/clips
      - BASE_URL=https://memeit.pro
      - ENVIRONMENT=production
      - INSTAGRAM_COOKIES_B64=${INSTAGRAM_COOKIES_B64}
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      # üîí yt-dlp SECURITY RESTRICTIONS
      - YTDLP_EXTRACT_FLAT=true
      - YTDLP_NO_PLAYLIST=true
      - YTDLP_RESTRICT_FILENAMES=true
      - YTDLP_MAX_FILESIZE=50M
    
    volumes:
      - ./storage:/app/clips:rw,Z
      - worker-temp:/app/worker/temp:rw
    
    healthcheck:
      test: ["CMD", "python", "-c", "import redis, os; redis.Redis.from_url(os.getenv('REDIS_URL')).ping()"]
      interval: 15s
      timeout: 5s
      start_period: 60s
      retries: 3

# üîí SECURE NETWORK CONFIGURATION  
networks:
  secure-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  secure-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24

# üîí SECURE VOLUME CONFIGURATION
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./storage/redis-data
  
  backend-cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100M,uid=1000,gid=1000
  
  worker-temp:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=500M,uid=1000,gid=1000 