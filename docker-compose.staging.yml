version: '3.8'

services:
  redis-staging:
    image: redis:alpine
    ports:
      - "6381:6379"  # Different port from production (6380 used by security-test)
    volumes:
      - staging_redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s

  backend-staging:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8001:8000"  # Different port from production
    environment:
      - MODE=production
      - REDIS_URL=redis://redis-staging:6379
      - CORS_ORIGINS=http://localhost:8082,http://staging.memeit.pro:8081
      - STORAGE_TYPE=local
      - CLIPS_DIR=/app/storage/clips
      - INSTAGRAM_COOKIES_PATH=/app/cookies/instagram_cookies.txt
    volumes:
      - ./.env.staging:/app/.env:ro           # Mount staging env file for security testing
      - ./storage:/app/storage                # Storage mount
      - ./cookies:/app/cookies:ro             # Cookies mount
    depends_on:
      redis-staging:
        condition: service_healthy
    networks:
      - staging-network
    restart: unless-stopped
    # Ensure proper permissions for storage
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 40s

  worker-staging:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - MODE=production
      - REDIS_URL=redis://redis-staging:6379
      - STORAGE_TYPE=local
      - CLIPS_DIR=/app/storage/clips
      - INSTAGRAM_COOKIES_PATH=/app/cookies/instagram_cookies.txt
    volumes:
      - ./.env.staging:/app/.env:ro           # Mount staging env file for worker
      - ./storage:/app/storage                # Storage mount with proper permissions
      - ./cookies:/app/cookies:ro             # Cookies mount
    depends_on:
      redis-staging:
        condition: service_healthy
      backend-staging:
        condition: service_healthy
    networks:
      - staging-network
    restart: unless-stopped
    # Ensure proper permissions for storage
    user: "1000:1000"

  frontend-staging:
    build:
      context: frontend-new
      dockerfile: Dockerfile.staging  # Use staging-specific Dockerfile
      args:
        - VITE_API_BASE_URL=""  # Use empty string since nginx handles /api prefix
        - VITE_MODE=staging       # Set staging mode
    environment:
      - NODE_ENV=production       # Use production mode for better performance
    ports:
      - "8082:3000"  # FIXED: Map to container's port 3000 (production nginx port)
    depends_on:
      backend-staging:
        condition: service_healthy
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]  # FIXED: Use correct port
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 40s

networks:
  staging-network:
    driver: bridge

volumes:
  staging_redis_data: 