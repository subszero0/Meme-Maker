name: Bundle Size Audit

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'frontend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'

jobs:
  bundle-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run bundle audit
      run: |
        cd frontend
        npm run audit:bundle:enforce
        
    - name: Generate bundle report
      if: always()
      run: |
        cd frontend
        npm run audit:bundle:verbose
        
    - name: Upload bundle report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bundle-report
        path: frontend/bundle-report.json
        retention-days: 30
        
    - name: Comment PR with bundle size
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './frontend/bundle-report.json';
          
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { summary, violations } = report;
            
            let comment = `## üì¶ Bundle Size Report\n\n`;
            comment += `- **Total bundle size**: ${summary.totalGzipKB} kB gzip (budget: 250 kB)\n`;
            comment += `- **Critical path size**: ${summary.criticalGzipKB} kB gzip (budget: 180 kB)\n`;
            comment += `- **Total chunks**: ${summary.totalChunks}\n`;
            comment += `- **Lazy-loaded chunks**: ${summary.lazyChunks}\n\n`;
            
            if (violations.length > 0) {
              comment += `### ‚ö†Ô∏è Budget Violations\n\n`;
              violations.forEach(violation => {
                comment += `- ‚ùå ${violation.message}\n`;
              });
            } else {
              comment += `### ‚úÖ All performance budgets met!\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } 