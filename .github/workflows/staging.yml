name: Staging Deployment

on:
  push:
    branches: [ main, 'release/*' ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/meme-backend
  IMAGE_NAME_WORKER: ${{ github.repository }}/meme-worker

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.build.outputs.backend-image }}
      worker-image: ${{ steps.build.outputs.worker-image }}
      image-tag: ${{ steps.build.outputs.image-tag }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Extract metadata for worker
        id: meta-worker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.worker
          push: true
          tags: ${{ steps.meta-worker.outputs.tags }}
          labels: ${{ steps.meta-worker.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image information
        id: build
        run: |
          echo "backend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "worker-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  # Run tests before deploying
  test:
    runs-on: ubuntu-latest
    needs: build-push
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install dependencies
        run: pip install -r requirements.txt
      
      - name: Run backend tests
        run: pytest -v --maxfail=1 --disable-warnings --tb=short

  frontend-test:
    runs-on: ubuntu-latest
    needs: build-push
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test
      
      - name: Build frontend
        run: npm run build

  # Final review audit (can be skipped with force_deploy)
  final-review:
    needs: [build-push, test, frontend-test]
    runs-on: ubuntu-latest
    if: ${{ !inputs.force_deploy }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install dependencies
        run: |
          cd backend && pip install -r requirements.txt
          cd frontend && npm ci
          npm install -g @lhci/cli @axe-core/cli
      
      - name: Start services for audit
        run: |
          docker-compose up -d redis
          cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null; then
              echo "✅ Backend is ready"
              break
            fi
            echo "   Waiting for backend... ($i/30)"
            sleep 2
          done
      
      - name: Run Final Review Audit
        run: |
          chmod +x scripts/final-review.sh
          ./scripts/final-review.sh
      
      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-review-reports-staging
          path: reports/
          retention-days: 7

  # Deploy to staging
  deploy:
    needs: [build-push, test, frontend-test]
    # Skip final-review if force_deploy is true, otherwise wait for it
    if: ${{ always() && (inputs.force_deploy || needs.final-review.result == 'success' || needs.final-review.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd ~/meme-maker
            
            # Update GITHUB_REPOSITORY in environment file if it exists
            if [ -f .env.staging ]; then
              if grep -q "^GITHUB_REPOSITORY=" .env.staging; then
                sed -i "s|^GITHUB_REPOSITORY=.*|GITHUB_REPOSITORY=${{ github.repository }}|" .env.staging
              else
                echo "GITHUB_REPOSITORY=${{ github.repository }}" >> .env.staging
              fi
            fi
            
            # Run deployment script
            chmod +x scripts/deploy_staging.sh
            ./scripts/deploy_staging.sh ${{ github.sha }} ${{ github.ref_name }}

      - name: Wait for service readiness
        run: |
          echo "Waiting for staging service to be ready..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f -s https://${{ secrets.STAGING_DOMAIN || 'staging.memeit.pro' }}/health > /dev/null; then
              echo "✅ Staging service is ready!"
              break
            fi
            
            echo "Attempt $attempt/$max_attempts - waiting for service..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Service failed to become ready within timeout"
            exit 1
          fi

  # Post-deployment tests
  smoke-tests:
    needs: deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Cypress smoke tests against staging
        run: npx cypress run --spec 'cypress/e2e/smoke.cy.ts' --config baseUrl=https://${{ secrets.STAGING_DOMAIN || 'staging.memeit.pro' }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-staging
          path: frontend/cypress/screenshots
          retention-days: 7

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-staging
          path: frontend/cypress/videos
          retention-days: 7

  # Create deployment summary
  summary:
    needs: [build-push, deploy, smoke-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Images Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ needs.build-push.outputs.backend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Worker**: \`${{ needs.build-push.outputs.worker-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Staging Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ secrets.STAGING_DOMAIN || 'staging.memeit.pro' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health**: https://${{ secrets.STAGING_DOMAIN || 'staging.memeit.pro' }}/health" >> $GITHUB_STEP_SUMMARY
          echo "- **API Docs**: https://${{ secrets.STAGING_DOMAIN || 'staging.memeit.pro' }}/docs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Tests**: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Review**: ${{ needs.final-review.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Tests**: ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus**: https://${{ secrets.STAGING_DOMAIN || 'staging.memeit.pro' }}/prometheus" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Staging Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the failed jobs and fix any issues before retrying." >> $GITHUB_STEP_SUMMARY
          echo "You can retry with force deployment if needed." >> $GITHUB_STEP_SUMMARY 