name: Terraform

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'infra/terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform.yml'

defaults:
  run:
    working-directory: infra/terraform

env:
  TF_VERSION: "1.6"

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`hcl
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Fail on formatting issues
      if: steps.fmt.outcome == 'failure'
      run: |
        echo "‚ùå Terraform formatting check failed!"
        echo "Run 'terraform fmt -recursive' in the infra/terraform directory to fix."
        exit 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'infra/terraform'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-south-1' }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
          -backend-config="key=clip-downloader/terraform.tfstate" \
          -backend-config="region=${{ vars.AWS_REGION || 'ap-south-1' }}"

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="aws_region=${{ vars.AWS_REGION || 'ap-south-1' }}" \
          -var="environment=${{ vars.ENVIRONMENT || 'dev' }}" \
          -var="vpc_id=${{ vars.VPC_ID }}" \
          -var="public_subnets=[${{ vars.PUBLIC_SUBNETS }}]" \
          -var="private_subnets=[${{ vars.PRIVATE_SUBNETS }}]" \
          -var="domain_name=${{ vars.DOMAIN_NAME || '' }}" \
          -var="cloudflare_zone_id=${{ vars.CLOUDFLARE_ZONE_ID || '' }}" \
          -var="cloudflare_api_token=${{ secrets.CF_API_TOKEN || '' }}" \
          -var="github_repository=${{ vars.GITHUB_REPOSITORY || '' }}" \
          -out=tfplan
      env:
        TF_VAR_cloudflare_api_token: ${{ secrets.CF_API_TOKEN }}

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_cloudflare_api_token: ${{ secrets.CF_API_TOKEN }}

    - name: Get Terraform Outputs
      id: outputs
      run: |
        echo "api_fqdn=$(terraform output -raw api_fqdn)" >> $GITHUB_OUTPUT
        echo "alb_url=$(terraform output -raw alb_url)" >> $GITHUB_OUTPUT
        echo "ci_deploy_role_arn=$(terraform output -raw ci_deploy_role_arn)" >> $GITHUB_OUTPUT

    - name: Test API Health Endpoint
      if: vars.DOMAIN_NAME != '' && vars.CLOUDFLARE_ZONE_ID != ''
      run: |
        echo "Testing API health endpoint..."
        API_URL="https://${{ steps.outputs.outputs.api_fqdn }}/health"
        
        # Wait for DNS propagation
        echo "Waiting for DNS propagation..."
        sleep 60
        
        # Test health endpoint
        for i in {1..10}; do
          if curl -f -s "${API_URL}" > /dev/null; then
            echo "‚úÖ Health check passed for ${API_URL}"
            break
          else
            echo "‚è≥ Health check failed on attempt $i, retrying in 30s..."
            if [ $i -eq 10 ]; then
              echo "‚ùå Health check failed after 10 attempts"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Add deployment summary
      if: always()
      run: |
        echo "## Infrastructure Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "### Outputs" >> $GITHUB_STEP_SUMMARY
        echo "- **API FQDN**: \`${{ steps.outputs.outputs.api_fqdn }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ALB URL**: \`${{ steps.outputs.outputs.alb_url }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **CI Deploy Role ARN**: \`${{ steps.outputs.outputs.ci_deploy_role_arn }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ vars.DOMAIN_NAME }}" != "" ] && [ "${{ vars.CLOUDFLARE_ZONE_ID }}" != "" ]; then
          echo "### SSL Certificate" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain**: \`api.${{ vars.DOMAIN_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ ACM certificate validated via DNS" >> $GITHUB_STEP_SUMMARY
          echo "- **WAF**: ‚úÖ Rate limiting enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **SSL**: ‚ùå No domain configured" >> $GITHUB_STEP_SUMMARY
          echo "- **WAF**: ‚ùå Disabled (requires domain)" >> $GITHUB_STEP_SUMMARY
        fi 