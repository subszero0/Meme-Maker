name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install dependencies
        run: pip install -r requirements.txt
      
      - name: Run backend tests with mock storage
        run: |
          echo "üß™ Running backend tests including mock storage tests..."
          pytest -v --maxfail=1 --disable-warnings --tb=short
          
      - name: Run simplified mock storage tests
        run: |
          echo "üîç Running simplified mock storage validation..."
          pytest tests/test_jobs_mock_storage_simplified.py -v --disable-warnings
          
      - name: Validate mock storage integration
        run: |
          echo "‚úÖ Validating InMemoryStorage functionality..."
          python -c "
          from app.utils.mock_storage import InMemoryStorage
          storage = InMemoryStorage()
          storage._store['test.mp4'] = b'test content'
          assert storage.get_file_content('test.mp4') == b'test content'
          assert 'memory://test.mp4' == storage.generate_presigned_url('test.mp4')
          storage.delete('test.mp4')
          assert len(storage.list_keys()) == 0
          print('‚úÖ Mock storage validation passed!')
          "

  frontend-test:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test
      
      - name: Build for E2E
        run: npm run build
      
      - name: Install serve
        run: npm install -g serve
      
      - name: Serve static build
        run: npx serve out -l 5000 &
        
      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          timeout 30 bash -c 'until curl -f http://localhost:5000 > /dev/null 2>&1; do sleep 1; done'
          echo "Server is ready!"
      
      - name: Run Cypress E2E tests
        env:
          CYPRESS_BASE_URL: http://localhost:5000
          # Point to a mock API endpoint for E2E tests since backend won't be running
          NEXT_PUBLIC_API_URL: http://localhost:5000
        run: npx cypress run --headless

  deploy:
    needs: [test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H memeit.pro >> ~/.ssh/known_hosts || true
        env:
          DEPLOY_SSH: ${{ secrets.DEPLOY_SSH }}
      - name: Deploy to VPS
        run: chmod +x scripts/deploy_to_vps.sh && ./scripts/deploy_to_vps.sh
        env:
          DEPLOY_SSH: memeit@memeit.pro

  health_check:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Wait for deployment to settle
        run: sleep 10
      - name: Check /health endpoint
        run: |
          echo "üîç Checking health endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://memeit.pro/health)
          echo "Response code: $RESPONSE"
          
          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå /health check failed with status code $RESPONSE"
            echo "Attempting to get response body for debugging..."
            curl -s https://memeit.pro/health || echo "Failed to get response body"
            exit 1
          fi
          
          echo "‚úÖ Health check passed - server responding with 200"
          
          # Optional: Verify response body contains expected status
          BODY=$(curl -s https://memeit.pro/health)
          echo "Response body: $BODY"
          
          if echo "$BODY" | grep -q '"status".*"ok"'; then
            echo "‚úÖ Response body contains expected status: ok"
          else
            echo "‚ö†Ô∏è  Response body doesn't contain expected status, but got 200"
          fi

# üîî NOTIFICATION INTEGRATION PLACEHOLDER
# 
# To add Slack notifications on failure, uncomment and configure:
# 
#   notify:
#     needs: [test, deploy, health_check]
#     runs-on: ubuntu-latest
#     if: failure()
#     steps:
#       - name: Notify Slack on failure
#         uses: 8398a7/action-slack@v3
#         with:
#           status: failure
#           webhook_url: ${{ secrets.SLACK_WEBHOOK }}
#           text: "‚ùå CI/CD Pipeline failed for commit ${{ github.sha }}"
#
# To add Discord webhook notifications:
#
#       - name: Notify Discord on failure  
#         run: |
#           curl -H "Content-Type: application/json" \
#                -d '{"content":"‚ùå Deployment failed for `${{ github.repository }}` at commit `${{ github.sha }}`"}' \
#                ${{ secrets.DISCORD_WEBHOOK }}
#
# To add email notifications via SendGrid:
#
#       - name: Send failure email
#         uses: sendgrid/sendgrid-nodejs@main
#         with:
#           api-key: ${{ secrets.SENDGRID_API_KEY }}
#           to: 'devops@yourcompany.com'
#           subject: 'CI/CD Pipeline Failed'
#           message: 'Pipeline failed for commit ${{ github.sha }}' 