name: "Staging Environment (Lightsail Instance)"

# This staging pipeline deploys feature branches for testing
# Production remains untouched until explicitly merged to master

on:
  push:
    branches: [ fix-audio-playback-investigation ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy to staging'
        required: true
        default: 'fix-audio-playback-investigation'

jobs:
  lint-test-staging:
    name: Lint and Test (Staging)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend-new/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('backend/pyproject.toml') }}
        restore-keys: |
          poetry-${{ runner.os }}-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install frontend dependencies
      working-directory: frontend-new
      run: npm ci

    - name: Install backend dependencies
      working-directory: backend
      run: |
        poetry config virtualenvs.create false
        poetry install

    - name: Lint frontend
      working-directory: frontend-new
      run: |
        npm run lint
        npx prettier --check .

    - name: Lint backend
      working-directory: backend
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .
        poetry run mypy app/ || echo "MyPy warnings present (non-critical annotation issues)"

    - name: Test frontend
      working-directory: frontend-new
      run: npm run test -- --run --passWithNoTests

    - name: Test backend
      working-directory: backend
      run: poetry run pytest -q

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: lint-test-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}     # Use same server as production
        username: ${{ secrets.DEPLOY_USER }} # Use same user as production  
        key: ${{ secrets.DEPLOY_SSH_KEY }}   # Use same SSH key as production
        script: |
          set -e
          
          # STAGING DEPLOYMENT - Port 8081 (to avoid conflict with production)
          
          # Create staging directory if it doesn't exist
          mkdir -p /home/ubuntu/Meme-Maker-Staging
          
          # Navigate to staging directory
          cd /home/ubuntu/Meme-Maker-Staging
          
          # Clone or update repository
          if [ ! -d ".git" ]; then
            git clone https://github.com/${{ github.repository }} .
          fi
          
          # Pull the feature branch (not master)
          git fetch origin
          git reset --hard origin/${{ github.ref_name }}
          echo "✅ Pulled staging branch: ${{ github.ref_name }}"
          
          # Stop staging services
          docker-compose -f docker-compose.staging.yml down --volumes --remove-orphans || echo "No staging services to stop"
          
          # Build and start staging
          docker-compose -f docker-compose.staging.yml build --no-cache
          docker-compose -f docker-compose.staging.yml up -d
          
          # Set up staging nginx (port 8081)
          sudo tee /etc/nginx/sites-available/meme-maker-staging > /dev/null << 'EOF'
          server {
              listen 8081;
              server_name staging.memeit.pro _;
              
              location / {
                  proxy_pass http://127.0.0.1:8082;  # Staging frontend port
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /api {
                  proxy_pass http://127.0.0.1:8001;  # Staging backend port
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_connect_timeout 300s;
                  proxy_send_timeout 300s;
                  proxy_read_timeout 300s;
              }
          }
          EOF
          
          # Enable staging site
          sudo ln -sf /etc/nginx/sites-available/meme-maker-staging /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          
          # Health check staging
          echo "🔍 Checking staging health..."
          sleep 30
          
          if curl -f -s --max-time 10 http://localhost:8081/ > /dev/null; then
            echo "✅ Staging deployment successful!"
            echo "🌐 Access staging at: http://staging.memeit.pro:8081"
          else
            echo "❌ Staging health check failed"
            docker-compose -f docker-compose.staging.yml logs
            exit 1
          fi

    - name: Add staging summary
      if: always()
      run: |
        echo "## 🧪 Staging Environment Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: Staging Environment (Port 8081)" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: http://staging.memeit.pro:8081" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Ready for Testing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Test all functionality on staging" >> $GITHUB_STEP_SUMMARY
        echo "2. If staging works → merge to master for production" >> $GITHUB_STEP_SUMMARY
        echo "3. If staging fails → fix issues on feature branch" >> $GITHUB_STEP_SUMMARY 