worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format for security monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # Security-focused logging for health endpoints
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status "$http_user_agent" security_endpoint="$uri"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Security: Hide nginx version
    server_tokens off;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;

    # Gzip compression with security considerations
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Global security headers (applied to all responses)
    map $sent_http_content_type $csp_header {
        default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https: wss:; frame-ancestors 'none'; base-uri 'self';";
        ~^text/html "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https: wss:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';";
    }

    # Define upstream for backend
    upstream backend_upstream {
        server backend:8000;
        keepalive 32;
    }

    # HTTP server - Security-hardened with health endpoint restrictions
    server {
        listen 80 default_server;
        server_name memeit.pro www.memeit.pro localhost _;
        root /usr/share/nginx/html;
        index index.html;

        # Global rate limiting
        limit_req zone=general burst=30 nodelay;

        # Security headers for HTTP (redirect to HTTPS)
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # SECURITY FIX: A02 Health Endpoint - Block HTTP access
        location /health {
            access_log /var/log/nginx/security.log security;
            return 426 "Upgrade Required: Health checks require HTTPS\nUse: https://$server_name/health";
            add_header Content-Type "text/plain";
            add_header Upgrade "TLS/1.2, HTTPS/1.1";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        location /api/health {
            access_log /var/log/nginx/security.log security;
            return 426 "Upgrade Required: Use HTTPS for API health checks\nUse: https://$server_name/api/health";
            add_header Content-Type "text/plain";
            add_header Upgrade "TLS/1.2, HTTPS/1.1";
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server - Full security implementation
    server {
        listen 443 ssl http2;
        server_name memeit.pro www.memeit.pro;
        root /usr/share/nginx/html;
        index index.html;

        # SSL Configuration (Production-ready)
        ssl_certificate /etc/ssl/certs/memeit.pro.crt;
        ssl_certificate_key /etc/ssl/private/memeit.pro.key;
        
        # Modern SSL/TLS configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # COMPREHENSIVE SECURITY HEADERS
        # HSTS - HTTP Strict Transport Security
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Content Security Policy - Comprehensive protection against XSS
        add_header Content-Security-Policy $csp_header always;
        
        # Prevent MIME type sniffing
        add_header X-Content-Type-Options "nosniff" always;
        
        # Clickjacking protection
        add_header X-Frame-Options "DENY" always;
        
        # XSS protection (legacy browsers)
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Referrer policy - Limit information leakage
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Permissions policy - Restrict browser features
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=(), vibrate=(), fullscreen=(self), sync-xhr=()" always;
        
        # Cache control for security-sensitive responses
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        # Handle SPA routing with security headers
        location / {
            try_files $uri $uri/ /index.html;
            
            # Override cache headers for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options "nosniff";
                access_log off;
            }
        }

        # API proxy with enhanced security
        location /api/ {
            # Rate limiting for API endpoints
            limit_req zone=api burst=20 nodelay;
            
            # Security headers specific to API responses
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';" always;
            
            proxy_pass http://backend_upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            
            # Enhanced settings for video processing
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            client_max_body_size 500M;
            
            # Security: Hide backend details
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
        }

        # SECURITY FIX: A02 Health Endpoint - Secure HTTPS-only access with restrictions
        location /health {
            # Restrict access to internal networks and monitoring systems
            allow 10.0.0.0/8;        # Private networks
            allow 172.16.0.0/12;     # Docker networks
            allow 192.168.0.0/16;    # Local networks
            allow 127.0.0.1;         # Localhost
            deny all;

            # Rate limiting for health checks
            limit_req zone=health burst=3 nodelay;

            # Enhanced security logging
            access_log /var/log/nginx/health.log main;
            
            # Secure health response
            return 200 "healthy";
            add_header Content-Type "text/plain";
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            add_header X-Health-Check "internal-only" always;
        }

        # Backend health endpoint with same restrictions
        location /api/health {
            # Same IP restrictions as /health
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 127.0.0.1;
            deny all;

            limit_req zone=health burst=3 nodelay;
            access_log /var/log/nginx/health.log main;

            proxy_pass http://backend_upstream/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Health-specific security headers
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header X-Health-Check "internal-only" always;
        }

        # WebSocket support with security
        location /ws {
            # Rate limiting for WebSocket connections
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://backend_upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Security: Block access to sensitive files
        location ~ /\.(ht|git|env) {
            deny all;
            return 404;
        }

        # Security: Block access to backup files
        location ~ \.(bak|backup|old|tmp)$ {
            deny all;
            return 404;
        }

        # Error pages with security headers
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        }
    }
} 